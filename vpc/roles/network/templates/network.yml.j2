---

AWSTemplateFormatVersion: "2010-09-09"
Description: Base Network Infrastructure

Parameters:
  Vpc:
    Type: string

Resources:

  InternalRoutes:
    Type: AWS::EC2::RouteTable
    VpcId: {Ref : Vpc}
    Tags:
      - Key: Name
        Value: {{stack_prefix | lower}}-internal

  ExternalRoutes:
    Type: AWS::EC2::RouteTable
    VpcId: {Ref : Vpc}
    Tags:
      - Key: Name
        Value: {{stack_prefix | lower}}-external

{% for segment_name,segment in segments.iteritems() %}
  {% set segment_cidr = vpc.cidr | ipsubnet(vpc.slash, loop.index0)
    {% for subnet in range(1, segment.azs + 1) %}

  {{ segment_name }}Subnet{{ subnet }}:

    Type: AWS::EC2::Subnet
    Properties:
      VpcId: {Ref: Vpc}
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: {{ lookup('get_azs',region).split(',')[subnet -1]}}
      Tags:
      - Key: Name
        Value: {{ stack_prefix | lower}}-{{ segment_name | lower }}


  # associate Subnet with RouteTable #
  {% if segment_name == 'Public' %}
    {% set route_table_name = 'ExternalRoutes' %}
  {% else %}
    {% set route_table_name = 'InternalRoutes' %}
  {% endif %}

  {{ segment_name }}RouteTblAssociation{{ subnet }}:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: { Ref: {{ route_table_name }} }
      SubnetId: { Ref: {{ segment_name }}Subnet{{ subnet }} }

    {% endfor %}
{% endfor %}


Outputs:
  {% for segment_name,segment in segments.iteritems() %}
    {{ segment_name }}Subnets:
      Value:
        "Fn::Join":
          - ","
          -
            {% for %}
              - {Ref: "{{ segment_name }}Subnet{{ subnet }}" }
            {% endfor %}

  {% endfor %}
